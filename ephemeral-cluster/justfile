# Usa bash
set shell := ["bash", "-eu", "-o", "pipefail", "-c"]

# --- Variables 
HOST  := env_var_or_default("HOST", "root-cluster")
VNAME := env_var_or_default("VNAME", "temporal-cluster")
VPORT := env_var_or_default("VPORT", "6000")

# ---------------------------------------------------------------------- utils -
print-seccion MSG:
    @printf "\033[1;34m{{MSG}}:\033[0m\n"

print-item KEY VALUE:
    @printf "  - {{KEY}}: \033[1;32m{{VALUE}}\033[0m\n"

print-subitem VALUE:
    @printf "    Â· {{VALUE}}\n"

print-exec NOTE CMD: 
    @printf "\033[1;33mNOTE: {{NOTE}}\033[0m\n"
    @printf "\033[43;30;1m$ {{CMD}} \033[0m\n"

# -------------------------------------------------------------------- cluster -
cluster-create:
    @just print-seccion "Cluster Create"
    @just print-item "Cluster" "{{HOST}}"

    @just print-subitem "(1/1) Creating Cluster"
    @kind get clusters | grep -qx "{{HOST}}" || kind create cluster --name "{{HOST}}" > /dev/null 2>&1

cluster-delete:
    @just print-seccion "Cluster Delete"
    @just print-item "Cluster" "{{HOST}}"

    @just print-subitem "(1/2) Deleting Cluster"
    @kind delete cluster --name "{{HOST}}" > /dev/null 2>&1

    @just print-subitem "(2/2) Cleanup"
    @rm -rf vcluster

cluster-connect:
    @just print-seccion "Cluster Connect"
    @just print-item "Cluster" "{{HOST}}"

    @just print-subitem "(1/3) Export kubeconfig"
    @kind get kubeconfig --name "{{HOST}}" > /tmp/kind-{{HOST}}.kubeconfig

    @just print-subitem "(2/3) Merge kubeconfig"
    @KUBECONFIG=~/.kube/config:/tmp/kind-{{HOST}}.kubeconfig kubectl config view --flatten > /tmp/config-merged
    @mv /tmp/config-merged ~/.kube/config

    @just print-subitem "(3/3) Cleanup"
    @rm -f /tmp/kind-{{HOST}}.kubeconfig

# ------------------------------------------------------------------- vcluster -
vcluster-create:
    @just print-seccion "Creating Ephemeral Cluster"
    @just print-item "Cluster" "{{VNAME}}"

    @just print-subitem "(1/2) Creating Namespace"
    @kubectl get ns "vcluster-{{VNAME}}" > /dev/null 2>&1 || kubectl create ns "vcluster-{{VNAME}}" > /dev/null

    @just print-subitem "(2/2) Installing VCluster"
    @helm repo add vcluster https://charts.loft.sh > /dev/null 2>&1 || true;
    @helm upgrade \
      --namespace "vcluster-{{VNAME}}" \
      --install "{{VNAME}}-cluster" vcluster/vcluster \
      --set controlPlane.proxy.extraSANs[0]=localhost \
      --wait > /dev/null

vcluster-delete:
    @just print-seccion "Deleting Ephemeral Cluster"
    @just print-item "Cluster" "{{VNAME}}"

    @just print-subitem "(1/2) Uninstalling VCluster"
    @helm uninstall "{{VNAME}}" --namespace "vcluster-{{VNAME}}" || true

    @just print-subitem "(2/2) Deleting Namespace"
    @kubectl delete ns "{{VNAME}}" || true

vcluster-tune:
    @just print-seccion "Tuning Ephemeral Cluster"
    @just print-item "Cluster" "{{VNAME}}"

    @just print-subitem "(1/1) Tuning VCluster"
    @helm upgrade "{{VNAME}}" vcluster/vcluster \
        --namespace "vcluster-{{VNAME}}" \
        --set syncer.resources.requests.cpu=200m \
        --set syncer.resources.requests.memory=256Mi \
        --wait

vcluster-connect:
    @just print-seccion "Connecting Ephemeral Cluster"
    @just print-item "Cluster" "{{VNAME}}"

    @just print-subitem "(1/1) Creating kubeconfig"
    @mkdir -p vcluster/{{VNAME}}
    @vcluster connect "{{VNAME}}-cluster" --namespace "vcluster-{{VNAME}}" --print > vcluster/{{VNAME}}/.kubeconfig
    @just print-exec \
        "Usage of the generated kubeconfig" \
        "kubectl --kubeconfig="vcluster/{{VNAME}}/.kubeconfig" get nodes"

VDASHBOARD := "vcluster-dashboard"
EXPIRATION := "24h"

vcluster-dashboard: 
    @just print-seccion "Ephemeral Cluster Dashboard"
    @just print-item "Cluster" "{{VNAME}}"

    @just print-subitem "(1/5) Creating Namespace"
    @kubectl --kubeconfig="vcluster/{{VNAME}}/.kubeconfig" create ns {{VDASHBOARD}} --dry-run=client -o yaml | \
      kubectl --kubeconfig="vcluster/{{VNAME}}/.kubeconfig" apply -f - > /dev/null

    @just print-subitem "(2/5) Install Dashboard"
    @KUBECONFIG="vcluster/{{VNAME}}/.kubeconfig" bash -lc ' \
        helm repo add headlamp https://kubernetes-sigs.github.io/headlamp/ || true; \
        helm repo update; \
        helm upgrade --install headlamp headlamp/headlamp -n {{VDASHBOARD}} \
    ' > /dev/null

    @just print-subitem "(3/5) Generate Token ({{EXPIRATION}})"
    @kubectl --kubeconfig="vcluster/{{VNAME}}/.kubeconfig" --namespace {{VDASHBOARD}} create serviceaccount headlamp-admin --dry-run=client -o yaml | \
        kubectl --kubeconfig="vcluster/{{VNAME}}/.kubeconfig" apply -f - > /dev/null
    @kubectl --kubeconfig="vcluster/{{VNAME}}/.kubeconfig" create clusterrolebinding headlamp-admin-{{VNAME}} \
        --serviceaccount={{VDASHBOARD}}:headlamp-admin --clusterrole=cluster-admin --dry-run=client -o yaml | \
        kubectl --kubeconfig="vcluster/{{VNAME}}/.kubeconfig" apply -f - > /dev/null
    
    @just print-subitem "(4/5) Store Token (Local + Secret)"
    @kubectl --kubeconfig="vcluster/{{VNAME}}/.kubeconfig" -n {{VDASHBOARD}} create token headlamp-admin --duration={{EXPIRATION}} > vcluster/{{VNAME}}/.dashboard.token.txt
    @kubectl --namespace vcluster-{{VNAME}} create secret generic vcluster-{{VNAME}}-dashboard-token \
        --from-literal=token="$(cat vcluster/{{VNAME}}/.dashboard.token.txt)" \
        --dry-run=client -o yaml | \
        kubectl apply -f - > /dev/null

    @just print-exec "Dashboard Token" "$(cat vcluster/{{VNAME}}/.dashboard.token.txt)"

    @just print-subitem "(5/5) Port Forward"
    @kubectl --kubeconfig="vcluster/{{VNAME}}/.kubeconfig" --namespace {{VDASHBOARD}} wait --for=condition=available deploy/headlamp --timeout=120s
    @KUBECONFIG="vcluster/{{VNAME}}/.kubeconfig" nohup kubectl --namespace {{VDASHBOARD}} \
        port-forward svc/headlamp {{VPORT}}:80 > "vcluster/{{VNAME}}/.dashboard.port-forward.log" 2>&1 &
    
    @just print-exec "Execute {{VNAME}} Dashboard" "http://localhost:{{VPORT}}"


# ------------------------------------------------------------------------ all -
all: cluster-create vcluster-create vcluster-connect vcluster-dashboard