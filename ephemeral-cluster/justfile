# Usa bash
set shell := ["bash", "-eu", "-o", "pipefail", "-c"]



# ================================================================== VARIABLES =

# - general --------------------------------------------------------------------

KUBECONFIG := "previous.config"

# - root cluster ---------------------------------------------------------------

HOST  := env_var_or_default("HOST", "root-cluster")

# - virtual cluster ------------------------------------------------------------

VNAME := env_var_or_default("VNAME", "temporal-cluster")
VPORT := env_var_or_default("VPORT", "5000")



# ====================================================================== UTILS =

# - prints ---------------------------------------------------------------------

print-seccion MSG:
    #!/usr/bin/env bash
    printf "\033[1;34m{{MSG}}:\033[0m\n"

print-item KEY VALUE:
    #!/usr/bin/env bash
    printf "  - {{KEY}}: \033[1;32m{{VALUE}}\033[0m\n"

print-subitem VALUE:
    #!/usr/bin/env bash
    printf "    · {{VALUE}}\n"

print-exec NOTE CMD: 
    #!/usr/bin/env bash
    printf "\033[1;33mNOTE: {{NOTE}}\033[0m\n"
    printf "\033[43;30;1m$ {{CMD}} \033[0m\n"

# - kube config ----------------------------------------------------------------

kubeconfig-merge:
    #!/usr/bin/env bash
    export KUBECONFIG=$(find vc-root-cluster -maxdepth 2 -type f -name config | tr '\n' ':'){{KUBECONFIG}}
    kubectl config view --flatten > ~/.kube/config



# =============================================================== ROOT CLUSTER =

# - create ---------------------------------------------------------------------

cluster-create:
    #!/usr/bin/env bash
    just print-seccion "Cluster Create"
    just print-item "Cluster" "vc-{{HOST}}"

    cp -n ~/.kube/config {{KUBECONFIG}}

    just print-subitem "(1/1) Creating Cluster" 
    kind get clusters | grep -qx "{{HOST}}" || kind create cluster --name "{{HOST}}" --wait 120s  > /dev/null 2>&1

    just cluster-connect

# - delete ---------------------------------------------------------------------

cluster-delete:
    #!/usr/bin/env bash
    just print-seccion "Cluster Delete"
    just print-item "Cluster" "vc-{{HOST}}"

    just print-subitem "(1/2) Deleting Cluster"
    kind delete cluster --name "{{HOST}}" > /dev/null 2>&1

    just print-subitem "(2/2) Cleanup"
    rm -rf vc-{{HOST}}
    cp {{KUBECONFIG}} ~/.kube/config > /dev/null | true

# - connect ---------------------------------------------------------------------

cluster-connect:
    #!/usr/bin/env bash
    just print-seccion "Cluster Connect"
    just print-item "Cluster" "vc-{{HOST}}"

    mkdir -p vc-{{HOST}}

    just print-subitem "(1/2) Export kubeconfig"
    kind get kubeconfig --name "{{HOST}}" > vc-{{HOST}}/config

    just print-subitem "(2/2) Merge kubeconfig"
    just kubeconfig-merge



# ============================================================ VIRTUAL CLUSTER =

# - create ---------------------------------------------------------------------

vcluster-create:
    #!/usr/bin/env bash
    just print-seccion "Creating Ephemeral Cluster"
    just print-item "Cluster" "vc-{{HOST}}/{{VNAME}}"

    export VCLUSTER="vcluster-{{VNAME}}"

    just print-subitem "(1/2) Creating Namespace"
    kubectl get ns $VCLUSTER > /dev/null 2>&1 || kubectl create ns $VCLUSTER > /dev/null

    just print-subitem "(2/2) Installing VCluster"
    helm repo add vcluster https://charts.loft.sh > /dev/null 2>&1 || true;
    helm upgrade "{{VNAME}}" vcluster/vcluster \
        --namespace $VCLUSTER \
        --install \
        --set controlPlane.proxy.extraSANs[0]=localhost \
        --set integrations.metricsServer.enabled=true \
        --set integrations.metricsServer.nodes=true \
        --set integrations.metricsServer.pods=true \
        --wait > /dev/null
    
    just vcluster-connect

# - delete ---------------------------------------------------------------------

vcluster-delete:
    #!/usr/bin/env bash
    just print-seccion "Deleting Ephemeral Cluster"
    just print-item "Cluster" "vc-{{HOST}}/{{VNAME}}"

    export VCLUSTER="vcluster-{{VNAME}}"
    export VCLUSTER_DIR="vc-{{HOST}}/{{VNAME}}"

    just print-subitem "(1/3) Uninstalling VCluster"
    helm uninstall "{{VNAME}}" --namespace $VCLUSTER > /dev/null 2>&1

    just print-subitem "(2/3) Deleting Namespace"
    kubectl delete ns $VCLUSTER > /dev/null 2>&1

    just print-subitem "(3/3) Cleanup"
    rm -rf $VCLUSTER_DIR
    just kubeconfig-merge

# - connect --------------------------------------------------------------------

vcluster-connect:
    #!/usr/bin/env bash
    just print-seccion "Connecting Ephemeral Cluster"
    just print-item "Cluster" "vc-{{HOST}}/{{VNAME}}"
    
    export VCLUSTER="vc-{{HOST}}/{{VNAME}}"

    just print-subitem "(1/2) Creating kubeconfig"
    mkdir -p $VCLUSTER
    vcluster connect "{{VNAME}}" --namespace "vcluster-{{VNAME}}" --print > $VCLUSTER/config

    just print-subitem "(2/2) Merge kubeconfig"
    just kubeconfig-merge

    just print-exec \
        "Usage of the generated kubeconfig" \
        'kubectl --kubeconfig="$VCLUSTER/config" get nodes'

# - tune -----------------------------------------------------------------------

vcluster-tune:
    @just print-seccion "Tuning Ephemeral Cluster"
    @just print-item "Cluster" "{{VNAME}}"

    @just print-subitem "(1/1) Tuning VCluster"
    @helm upgrade "{{VNAME}}" vcluster/vcluster \
        --namespace "vcluster-{{VNAME}}" \
        --set syncer.resources.requests.cpu=200m \
        --set syncer.resources.requests.memory=256Mi \
        --wait



# ====================================================================== ISTIO =

INAME :=  "istio-system"

# - create ---------------------------------------------------------------------

istio-create CLUSTER:
    #!/usr/bin/env bash
    just print-seccion "Installing Istio in Ephemeral Cluster"
    just print-item "Cluster" "{{CLUSTER}}"

    export INAME="{{INAME}}"
    export KUBECONFIG="{{CLUSTER}}/config"

    just print-subitem "(1/5) Add Istio Helm repo"
    helm repo add istio https://istio-release.storage.googleapis.com/charts > /dev/null 2>&1 || true;
    helm repo update > /dev/null 2>&1 

    just print-subitem "(2/5) Install CRDs & Base"
    kubectl create ns $INAME --dry-run=client -o yaml | kubectl apply -f - > /dev/null
    kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/standard-install.yaml > /dev/null
    helm upgrade --install istio-base istio/base \
        --namespace $INAME \
        --set serviceAccount.create=true \
        --set autoscaling.enabled=false \
        --set service.type=ClusterIP \
        --wait > /dev/null

    just print-subitem "(3/5) Install Istiod (control plane)"
    helm upgrade --install istio-control-plane istio/istiod \
        --namespace $INAME \
        --set serviceAccount.create=true \
        --set autoscaling.enabled=false \
        --set service.type=ClusterIP \
        --wait > /dev/null

    just print-subitem "(4/5) Install Ingress Gateway"
    helm upgrade --install istio-gateway istio/gateway \
        --namespace $INAME \
        --set serviceAccount.create=true \
        --set autoscaling.enabled=false \
        --set service.type=ClusterIP \
        --wait > /dev/null

    export GATEWAY_NAMESPACE=$INAME
    envsubst < manifests/istio-gateway.tmpl.yaml | kubectl apply -f - > /dev/null

    just print-subitem "(5/5) Port-forward Istio"
    kubectl --namespace $INAME wait \
        --for=condition=available deploy/istio-gateway \
        --timeout=180s > /dev/null
    kubectl --namespace $INAME port-forward svc/istio-gateway {{VPORT}}:80 \
        > "{{CLUSTER}}/.istio.port-forward.log" 2>&1 &


# - ingress --------------------------------------------------------------------

istio-ingress CLUSTER NAMESPACE BASE_PATH SERVICE_NAME SERVICE_PORT:
    #!/usr/bin/env bash

    export KUBECONFIG="{{CLUSTER}}/config"
    export GATEWAY_NAMESPACE="{{INAME}}"
    export NAMESPACE={{NAMESPACE}}
    export BASE_PATH={{BASE_PATH}}
    export SERVICE_NAME={{SERVICE_NAME}}
    export SERVICE_PORT={{SERVICE_PORT}}

    envsubst < manifests/istio-http-route.tmpl.yaml | kubectl apply -f - > /dev/null
    envsubst < manifests/istio-reference-grant.tmpl.yaml |kubectl apply -f - > /dev/null



# ===================================================================== ARGOCD =

ANAME := "argo-cd"

# - create ---------------------------------------------------------------------

argo-create CLUSTER PATH:
    #!/usr/bin/env bash
    just print-seccion "Installing Argo in Ephemeral Cluster"
    just print-item "Cluster" "{{CLUSTER}}"

    export KUBECONFIG="{{CLUSTER}}/config"
    export ANAME="{{ANAME}}"
    
    just print-subitem "(1/3) Add ArgoCD helm repo"
    kubectl create ns $ANAME --dry-run=client -o yaml | kubectl apply -f - > /dev/null
    helm repo add argo https://argoproj.github.io/argo-helm > /dev/null
    helm repo update > /dev/null

    just print-subitem "(2/3) Install ArgoCD"
    helm upgrade --install argo-cd argo/argo-cd \
        --namespace $ANAME \
        --set server.extraArgs[0]=--basehref \
        --set server.extraArgs[1]={{PATH}} \
        --set server.extraArgs[2]=--rootpath \
        --set server.extraArgs[3]={{PATH}} \
        --set server.extraArgs[4]=--insecure \
        --set server.extraArgs[5]=--disable-auth \
        > /dev/null

    just print-subitem "(temp) Port-forward Argo"
    kubectl --namespace $ANAME wait \
        --for=condition=available deploy/argo-cd-argocd-server \
        --timeout=180s > /dev/null
    kubectl --namespace $ANAME port-forward svc/argo-cd-argocd-server 3003:80 \
        > "{{CLUSTER}}/.argocd.port-forward.log" 2>&1 &

    just print-subitem "(3/3) Acceso rápido"

    just istio-ingress {{CLUSTER}} $ANAME "{{PATH}}" "argo-cd-argocd-server" "80"
    just print-exec "ArgoCD:" "http://localhost:{{VPORT}}{{PATH}}"



# ======================================================================== ALL =

# - default vcluster -----------------------------------------------------------

vcluster-full: 
    @just vcluster-create
    @just istio-create "vc-{{HOST}}/{{VNAME}}"
    @just argo-create "vc-{{HOST}}/{{VNAME}}" "/{{VNAME}}/argo"


# - default cluster ------------------------------------------------------------

all: cluster-create vcluster-full